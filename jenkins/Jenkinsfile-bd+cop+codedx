pipeline {
    agent { label 'linux64' }

    environment {
        PRODUCTION = "${env.BRANCH_NAME ==~ /^(stage|release)$/ ? 'true' : 'false'}"
        FULLSCAN = "${env.BRANCH_NAME ==~ /^(main|master|develop|stage|release)$/ ? 'true' : 'false'}"
        PRSCAN = "${env.CHANGE_TARGET ==~ /^(main|master|develop|stage|release)$/ ? 'true' : 'false'}"
        PROJECT = sh(script: "basename $GIT_URL .git", returnStdout: true).trim()
        BRIDGECLI_LINUX64 = 'https://sig-repo.synopsys.com/artifactory/bds-integrations-release/com/synopsys/integration/synopsys-bridge/latest/synopsys-bridge-linux64.zip'
    }

    tools {
        maven 'maven-3.9'
        jdk 'openjdk-17'
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn -B compile'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn -B test'
            }
        }
        stage('Scan') {
            parallel {
                stage('Black Duck Full Scan') {
                    when { environment name: 'FULLSCAN', value: 'true' }
                    environment {
                        DETECT_PROJECT_NAME = "$PROJECT"
                        DETECT_PROJECT_VERSION_NAME = "$BRANCH_NAME"
                        DETECT_CODE_LOCATION_NAME = "$PROJECT-$BRANCH_NAME"
                        DETECT_RISK_REPORT_PDF = "${env.PRODUCTION == 'true' ? 'true' : 'false'}"
                        DETECT_EXCLUDED_DETECTOR_TYPES = 'GIT'
                        BRIDGE_BLACKDUCK_TOKEN = credentials('testing.blackduck.synopsys.com')
                    }
                    steps {
                        script {
                            sh '''
                                curl -fLsS -o bridge.zip $BRIDGECLI_LINUX64 && unzip -qo -d $WORKSPACE_TMP bridge.zip && rm -f bridge.zip
                                $WORKSPACE_TMP/synopsys-bridge --verbose --stage blackduck \
                                    blackduck.url=$BLACKDUCK_URL \
                                    blackduck.scan.failure.severities='BLOCKER' \
                                    blackduck.scan.full='true'
                            '''
                        }
                    }
                }
                stage('Black Duck PR Scan') {
                    when { environment name: 'PRSCAN', value: 'true' }
                    environment {
                        DETECT_PROJECT_NAME = "$PROJECT"
                        DETECT_PROJECT_VERSION_NAME = "$CHANGE_TARGET"
                        DETECT_CODE_LOCATION_NAME = "$PROJECT-$CHANGE_TARGET"
                        DETECT_EXCLUDED_DETECTOR_TYPES = 'GIT'
                        BRIDGE_BLACKDUCK_TOKEN = credentials('testing.blackduck.synopsys.com')
                        GITHUB_TOKEN = credentials('github-pat')
                    }
                    steps {
                        script {
                            sh '''
                                curl -fLsS -o bridge.zip $BRIDGECLI_LINUX64 && unzip -qo -d $WORKSPACE_TMP bridge.zip && rm -f bridge.zip
                                $WORKSPACE_TMP/synopsys-bridge --verbose --stage blackduck \
                                    blackduck.url=$BLACKDUCK_URL \
                                    blackduck.scan.full='false' \
                                    blackduck.automation.prcomment='true' \
                                    github.repository.branch.name=$BRANCH_NAME \
                                    github.repository.name=$PROJECT \
                                    github.repository.owner.name=$CHANGE_AUTHOR \
                                    github.repository.pull.number=$CHANGE_ID \
                                    github.user.token=$GITHUB_TOKEN
                            '''
                        }
                    }
                }
                stage('Coverity on Polaris Full Scan') {
                    when { environment name: 'FULLSCAN', value: 'true' }
                    environment {
                        POLARIS_ACCESS_TOKEN = credentials('sipse.polaris.synopsys.com')
                    }
                    steps {
                        script {
                            sh '''
                                curl -fLOsS $POLARIS_SERVER_URL/api/tools/polaris_cli-linux64.zip
                                unzip -qo -d $WORKSPACE_TMP -jo polaris_cli-linux64.zip && rm -f polaris_cli-linux64.zip
                                $WORKSPACE_TMP/polaris --co project.name=$PROJECT analyze -w
                                if [ $(cat .synopsys/polaris/cli-scan.json | jq '[.issueSummary.issuesBySeverity|.critical,.high]|add') -ne 0 ]; then exit 8; fi
                            '''
                        }
                    }
                }
                stage('Coverity on Polaris PR Scan') {
                    when { environment name: 'PRSCAN', value: 'true' }
                    environment {
                        POLARIS_ACCESS_TOKEN = credentials('sipse.polaris.synopsys.com')
                    }
                    steps {
                        script {
                            sh '''
                                curl -fLOsS $POLARIS_SERVER_URL/api/tools/polaris_cli-linux64.zip
                                unzip -qo -d $WORKSPACE_TMP -jo polaris_cli-linux64.zip && rm -f polaris_cli-linux64.zip
                                $WORKSPACE_TMP/polaris --co project.name=$PROJECT analyze -w
                                if [ $(cat .synopsys/polaris/cli-scan.json | jq '.issueSummary.newIssues') -ne 0 ]; then exit 8; fi
                            '''
                        }
                    }
                }
            }
        }
        stage('CodeDX') {
            when { environment name: 'FULLSCAN', value: 'true' }
            steps {
                withCredentials([string(credentialsId: 'codedx.chuckaude.com', variable: 'CODEDX_API_KEY')]) {
                    step([
                        $class: 'CodeDxPublisher',
                        url: "$CODEDX_URL",
                        selfSignedCertificateFingerprint: '',
                        key: "$CODEDX_API_KEY",
                        projectId: "$CODEDX_PROJECT_ID",
                        baseBranchName: 'main',
                        targetBranchName: "$BRANCH_NAME",
                        sourceAndBinaryFiles: '**',
                        excludedSourceAndBinaryFiles: '**',
                        analysisName: "Build [#$BUILD_TAG]($BUILD_URL)",
                        analysisResultConfiguration: [
                            policyBreakBuildBehavior: 'MarkFailed',
                            failureSeverity: 'Critical',
                            failureOnlyNew: false,
                            unstableSeverity: 'High',
                            unstableOnlyNew: false,
                            numBuildsInGraph: 0
                        ]
                    ])
                }
            }
        }
        stage('Deploy') {
            when { environment name: 'PRODUCTION', value: 'true' }
            steps {
                sh 'mvn -B -DskipTests install'
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: '.synopsys/polaris/configuration/synopsys.yml, .synopsys/polaris/data/coverity/*/idir/build-log.txt, *_BlackDuck_RiskReport.pdf'
            cleanWs()
        }
    }
}
